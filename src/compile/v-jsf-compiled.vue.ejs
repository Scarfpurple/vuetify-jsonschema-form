<script setup>
import { StatefulLayout } from '@json-layout/core'
import { ref, getCurrentInstance } from 'vue'

import Tree from '<%- baseImport %>/tree.vue'
<% comps.forEach(function(comp){ %>
import <%= comp.replace(/-/g, '') %> from '<%- baseImport %>/nodes/<%= comp %>.vue'
<% }); %>

<%- compiledLayoutCode %>

const vueInstance = getCurrentInstance()
<% comps.forEach(function(comp){ %>
if (!vueInstance?.appContext.app.component('vjsf-node-<%= comp %>')) {
  vueInstance.appContext.app.component('vjsf-node-<%= comp %>', <%= comp.replace(/-/g, '') %>)
}
<% }); %>

const props = defineProps(['modelValue', 'mode'])
const emit = defineEmits(['update:modelValue', 'update:state'])

const statefulLayout = ref(null)
const stateTree = ref(null)

const el = ref(null)
const { width } = useElementSize(el)

const fullOptions = computed(() => {
  if (!width.value) return null
  return { ...props.options, width: Math.round(width.value) }
})

const initStatefulLayout = () => {
  if (!fullOptions.value) return
  const _statefulLayout = new StatefulLayout(compiledLayout, compiledLayout.skeletonTree, fullOptions.value, props.modelValue)
  statefulLayout.value = _statefulLayout
  stateTree.value = _statefulLayout.stateTree
  _statefulLayout.events.on('update', () => {
    stateTree.value = _statefulLayout.stateTree
    emit('update:modelValue', _statefulLayout.data)
    emit('update:state', _statefulLayout)
  })
  emit('update:state', _statefulLayout)
}

watch(fullOptions, (newOptions) => {
  if (!newOptions) {
    statefulLayout.value = null
  } else if (statefulLayout.value) {
    statefulLayout.value.options = newOptions
  } else {
    initStatefulLayout()
  }
})

// case where data is updated from outside
watch(() => props.modelValue, (newData) => {
  if (statefulLayout.value && statefulLayout.value.data !== newData) statefulLayout.value.data = newData
})

</script>

<template>
  <div ref="el">
    <tree
      v-if="statefulLayout && stateTree"
      :model-value="stateTree"
      :stateful-layout="statefulLayout"
    />
  </div>
</template>