import{_ as n,F as a,q as i,j as o,l as t,t as r}from"./entry.9b03b506.js";import{V as s}from"./VContainer.70b7e2d9.js";import"./tag.45a7e3ff.js";const l={data:()=>({title:"1.x to 2.x"}),head(){return{title:"vjsf - "+this.title}}},c={class:"display-1 mb-4"},d=t("p",null," The 2.x major version does not introduce actual breaking changes in the API. But the implementation of events and reactivity was changed in important ways. ",-1),u=t("p",null,[t("ul",null,[t("li",null,"better implementation of v-model by not mutating the value parameter and instead creating clones for each input event (better for clarity and side-effects)"),t("li",null,"prevent triggering duplicate input events (better for performance and clarity)"),t("li",null,"a change event is always triggered after the corresponding input event (better if you want to automatically validate the form on each change)")])],-1),h=t("p",null," When upgrading you should focus on checking that the way you integrate vjsf is in line with these changes. In our experience a very straightforward implementation using v-model and either a validate button or listening to change events for validation should work better than it used to. ",-1);function p(e,f,g,m,v,_){return o(),a(s,null,{default:i(()=>[t("h1",c,r(e.title),1),d,u,h]),_:1})}const x=n(l,[["render",p]]);export{x as default};
